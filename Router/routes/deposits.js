const express = require("express");
const router = express.Router();
const db = require("../../utils/database");

// ### DEPOSITS ###

// Get All Deposits data
router.get("/deposits/all", (req, res) => {
  db.query("SELECT * FROM deposits ORDER BY DepositId ASC", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      console.log("[API] all deposits data fetched successfully");
      res.status(200).send(result.rows);
    }
  });
});

// Get deposit data of a certain customer, by ID
router.get("/deposits/certain/customers/:id", (req, res) => {
  const id = req.params.id;
  db.query(
    "SELECT * FROM deposits WHERE CustomerId = $1 ORDER BY DepositId ASC",
    [id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        console.log("[API] deposit data of a certain customer fetched successfully");
        res.status(200).send(result.rows);
      }
    }
  );
});

// Add deposit (increase balance) of a customer, by ID
router.post('/deposits/add/id/:id', (req, res) => {
  const customer_id = req.params.id;
  const amount = req.body.amount;
  console.log(customer_id, amount);
  // DepositTimestamp is automatically generated by the database
  // insert data to deposits table and update balance in customers table
  db.query(
      'INSERT INTO deposits (CustomerId, Amount) VALUES ($1, $2)',
      [customer_id, amount], (err, result) => {
        if (err) {
          console.log(err);
        } else {
          // update balance in customers table
          db.query(
              'UPDATE customers SET Balance = Balance + $1 WHERE CustomerId = $2',
              [amount, customer_id], (err, result) => {
                if (err) {
                  console.log(err);
                  // if error occurs, delete the last made deposit
                  let lastDepositDeleted = false;
                  do {
                    db.query(
                        'DELETE FROM deposits WHERE DepositId = (SELECT MAX(DepositId) FROM deposits)',
                        (err, result) => {
                          if (err) {
                            console.log(err);
                          } else {
                            lastDepositDeleted = true;
                          }
                        });
                  } while (!lastDepositDeleted);
                } else {
                  console.log('[API] deposit added successfully');
                  // return new balance
                  db.query(
                      'SELECT Balance FROM customers WHERE CustomerId = $1',
                      [customer_id], (err, result) => {
                        if (err) {
                          console.log(err);
                        } else {
                          console.log(
                              '     and writing new balance to the card');
                          res.status(200).send(result.rows);
                        }
                      });
                }
              });
        }
      });
});

// Add deposit (increase balance) of a customer, by UUID
router.post('/deposits/add/uuid/:uuid', (req, res) => {
  const customer_uuid = req.params.uuid;
  const amount = req.body.amount;
  console.log(customer_uuid, amount);

  // DepositTimestamp is automatically generated by the database
  // insert data to deposits table and update balance in customers table
  db.query(
      // Get customer ID from UUID, as deposits table will only store customer
      // ID
      'SELECT customerid FROM customers WHERE customeruuid = $1',
      [customer_uuid], (err, result) => {
        if (err) {
          console.log(err);
        } else {
          console.log('[API] customer UUID is valid, continuing...');

          // Store customer ID, to be used for further querying
          console.log(result.rows);
          const customer_id = result.rows[0].customerid;
          console.log(`Customer ID: ${customer_id}`);

          db.query(
              // Insert data into deposits table
              'INSERT INTO deposits (customerid, amount) VALUES ($1, $2)',
              [customer_id, amount], (err, result) => {
                if (err) {
                  console.log(err);
                } else {
                  // update balance in customers table
                  db.query(
                      'UPDATE customers SET balance = balance + $1 WHERE customerid = $2',
                      [amount, customer_id], (err, result) => {
                        if (err) {
                          console.log(err);
                          // if error occurs, delete the last made deposit
                          let lastDepositDeleted = false;
                          do {
                            db.query(
                                'DELETE FROM deposits WHERE DepositId = (SELECT MAX(DepositId) FROM deposits)',
                                (err, result) => {
                                  if (err) {
                                    console.log(err);
                                  } else {
                                    lastDepositDeleted = true;
                                  }
                                });
                          } while (!lastDepositDeleted);
                        } else {
                          console.log('[API] deposit added successfully');

                          // return new balance
                          db.query(
                              'SELECT balance FROM customers WHERE customerid = $1',
                              [customer_id], (err, result) => {
                                if (err) {
                                  console.log(err);
                                } else {
                                  console.log(
                                      '     and writing new balance to the card');
                                  res.status(200).send(result.rows);
                                }
                              });
                        }
                      });
                }
              });
        }
      });
});

module.exports = router;