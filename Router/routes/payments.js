const express = require("express");
const router = express.Router();
const db = require("../../utils/database");

// ### PAYMENTS ###

// Get All Payments data
router.get("/payments/all", (req, res) => {
  db.query("SELECT * FROM payments ORDER BY PaymentId ASC", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.status(200).send(result.rows);
    }
  });
});

// Get Payment data of A Certain Customer
router.get("/payments/certain/customers/:id", (req, res) => {
  const id = req.params.id;
  db.query(
    "SELECT * FROM payments WHERE CustomerId = $1 ORDER BY PaymentId ASC",
    [id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.status(200).send(result.rows);
      }
    }
  );
});

// Get Payment data of A Certain Spot
router.get("/payments/certain/spots/:id", (req, res) => {
  const id = req.params.id;
  db.query(
    "SELECT * FROM payments WHERE SpotId = $1 ORDER BY PaymentId ASC",
    [id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.status(200).send(result.rows);
      }
    }
  );
});

// Add A Payment of A Customer in A Spot
router.post("/payments/add", (req, res) => {
  const { customer_id, spot_id } = req.body;
  // PaymentTimestamp is automatically generated by the database
  // insert data to payments table and update balance in customers table, balance update is subtracting old balance with price of the spot
  db.query(
    "INSERT INTO payments (CustomerId, SpotId) VALUES ($1, $2)",
    [customer_id, spot_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        // update balance in customers table
        db.query(
          "UPDATE customers SET Balance = Balance - (SELECT Price FROM spots WHERE SpotId = $1) WHERE CustomerId = $2",
          [spot_id, customer_id],
          (err, result) => {
            if (err) {
              console.log(err);
              // if error occurs, delete the last payment was made
              let lastPaymentDeleted = false;
              do {
                db.query(
                  "DELETE FROM payments WHERE PaymentId = (SELECT MAX(PaymentId) FROM payments)",
                  (err, result) => {
                    if (err) {
                      console.log(err);
                    } else {
                      lastPaymentDeleted = true;
                    }
                  }
                );
              } while (!lastPaymentDeleted);
            } else {
              res.status(200).send("payment added successfully");
            }
          }
        );
      }
    }
  );
});

module.exports = router;